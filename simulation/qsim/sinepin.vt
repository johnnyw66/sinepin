// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2020 14:19:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sinepin
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sinepin_vlg_sample_tst(
	btn,
	clk,
	sampler_tx
);
input  btn;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(btn or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sinepin_vlg_check_tst (
	led,
	led2,
	led3,
	radio,
	speaker,
	u8bit_sineromvalue,
	sampler_rx
);
input  led;
input  led2;
input  led3;
input  radio;
input  speaker;
input [7:0] u8bit_sineromvalue;
input sampler_rx;

reg  led_expected;
reg  led2_expected;
reg  led3_expected;
reg  radio_expected;
reg  speaker_expected;
reg [7:0] u8bit_sineromvalue_expected;

reg  led_prev;
reg  led2_prev;
reg  led3_prev;
reg  radio_prev;
reg  speaker_prev;
reg [7:0] u8bit_sineromvalue_prev;

reg [7:0] u8bit_sineromvalue_expected_prev;

reg [7:0] last_u8bit_sineromvalue_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_prev = led;
	led2_prev = led2;
	led3_prev = led3;
	radio_prev = radio;
	speaker_prev = speaker;
	u8bit_sineromvalue_prev = u8bit_sineromvalue;
end

// update expected /o prevs

always @(trigger)
begin
	u8bit_sineromvalue_expected_prev = u8bit_sineromvalue_expected;
end


// expected u8bit_sineromvalue[ 7 ]
initial
begin
	u8bit_sineromvalue_expected[7] = 1'bX;
end 
// expected u8bit_sineromvalue[ 6 ]
initial
begin
	u8bit_sineromvalue_expected[6] = 1'bX;
end 
// expected u8bit_sineromvalue[ 5 ]
initial
begin
	u8bit_sineromvalue_expected[5] = 1'bX;
end 
// expected u8bit_sineromvalue[ 4 ]
initial
begin
	u8bit_sineromvalue_expected[4] = 1'bX;
end 
// expected u8bit_sineromvalue[ 3 ]
initial
begin
	u8bit_sineromvalue_expected[3] = 1'bX;
end 
// expected u8bit_sineromvalue[ 2 ]
initial
begin
	u8bit_sineromvalue_expected[2] = 1'bX;
end 
// expected u8bit_sineromvalue[ 1 ]
initial
begin
	u8bit_sineromvalue_expected[1] = 1'bX;
end 
// expected u8bit_sineromvalue[ 0 ]
initial
begin
	u8bit_sineromvalue_expected[0] = 1'bX;
end 
// generate trigger
always @(led_expected or led or led2_expected or led2 or led3_expected or led3 or radio_expected or radio or speaker_expected or speaker or u8bit_sineromvalue_expected or u8bit_sineromvalue)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led = %b | expected led2 = %b | expected led3 = %b | expected radio = %b | expected speaker = %b | expected u8bit_sineromvalue = %b | ",led_expected_prev,led2_expected_prev,led3_expected_prev,radio_expected_prev,speaker_expected_prev,u8bit_sineromvalue_expected_prev);
	$display("| real led = %b | real led2 = %b | real led3 = %b | real radio = %b | real speaker = %b | real u8bit_sineromvalue = %b | ",led_prev,led2_prev,led3_prev,radio_prev,speaker_prev,u8bit_sineromvalue_prev);
`endif
	if (
		( u8bit_sineromvalue_expected_prev[0] !== 1'bx ) && ( u8bit_sineromvalue_prev[0] !== u8bit_sineromvalue_expected_prev[0] )
		&& ((u8bit_sineromvalue_expected_prev[0] !== last_u8bit_sineromvalue_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[0] = u8bit_sineromvalue_expected_prev[0];
	end
	if (
		( u8bit_sineromvalue_expected_prev[1] !== 1'bx ) && ( u8bit_sineromvalue_prev[1] !== u8bit_sineromvalue_expected_prev[1] )
		&& ((u8bit_sineromvalue_expected_prev[1] !== last_u8bit_sineromvalue_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[1] = u8bit_sineromvalue_expected_prev[1];
	end
	if (
		( u8bit_sineromvalue_expected_prev[2] !== 1'bx ) && ( u8bit_sineromvalue_prev[2] !== u8bit_sineromvalue_expected_prev[2] )
		&& ((u8bit_sineromvalue_expected_prev[2] !== last_u8bit_sineromvalue_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[2] = u8bit_sineromvalue_expected_prev[2];
	end
	if (
		( u8bit_sineromvalue_expected_prev[3] !== 1'bx ) && ( u8bit_sineromvalue_prev[3] !== u8bit_sineromvalue_expected_prev[3] )
		&& ((u8bit_sineromvalue_expected_prev[3] !== last_u8bit_sineromvalue_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[3] = u8bit_sineromvalue_expected_prev[3];
	end
	if (
		( u8bit_sineromvalue_expected_prev[4] !== 1'bx ) && ( u8bit_sineromvalue_prev[4] !== u8bit_sineromvalue_expected_prev[4] )
		&& ((u8bit_sineromvalue_expected_prev[4] !== last_u8bit_sineromvalue_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[4] = u8bit_sineromvalue_expected_prev[4];
	end
	if (
		( u8bit_sineromvalue_expected_prev[5] !== 1'bx ) && ( u8bit_sineromvalue_prev[5] !== u8bit_sineromvalue_expected_prev[5] )
		&& ((u8bit_sineromvalue_expected_prev[5] !== last_u8bit_sineromvalue_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[5] = u8bit_sineromvalue_expected_prev[5];
	end
	if (
		( u8bit_sineromvalue_expected_prev[6] !== 1'bx ) && ( u8bit_sineromvalue_prev[6] !== u8bit_sineromvalue_expected_prev[6] )
		&& ((u8bit_sineromvalue_expected_prev[6] !== last_u8bit_sineromvalue_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[6] = u8bit_sineromvalue_expected_prev[6];
	end
	if (
		( u8bit_sineromvalue_expected_prev[7] !== 1'bx ) && ( u8bit_sineromvalue_prev[7] !== u8bit_sineromvalue_expected_prev[7] )
		&& ((u8bit_sineromvalue_expected_prev[7] !== last_u8bit_sineromvalue_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u8bit_sineromvalue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u8bit_sineromvalue_expected_prev);
		$display ("     Real value = %b", u8bit_sineromvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u8bit_sineromvalue_exp[7] = u8bit_sineromvalue_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sinepin_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn;
reg clk;
// wires                                               
wire led;
wire led2;
wire led3;
wire radio;
wire speaker;
wire [7:0] u8bit_sineromvalue;

wire sampler;                             

// assign statements (if any)                          
sinepin i1 (
// port map - connection between master ports and signals/registers   
	.btn(btn),
	.clk(clk),
	.led(led),
	.led2(led2),
	.led3(led3),
	.radio(radio),
	.speaker(speaker),
	.u8bit_sineromvalue(u8bit_sineromvalue)
);

// btn
initial
begin
	btn = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

sinepin_vlg_sample_tst tb_sample (
	.btn(btn),
	.clk(clk),
	.sampler_tx(sampler)
);

sinepin_vlg_check_tst tb_out(
	.led(led),
	.led2(led2),
	.led3(led3),
	.radio(radio),
	.speaker(speaker),
	.u8bit_sineromvalue(u8bit_sineromvalue),
	.sampler_rx(sampler)
);
endmodule

