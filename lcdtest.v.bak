module lcdandsegtest
#(parameter EOS="@")
(
	input clk,							// FPGA clock 'BOARD_CLOCKSPEED'	
	input btn,							// btn to restart music	
	input btn2,							// external button
	output [6:0 ] _7seg,
	output [7:0 ] single8seg,	
	output [3:0] digitsel ,
	
	output LCDen,
	output LCDrs,
	output [7:0] LCDdata,
	
	output led,							//  
	output led2,
	output led3,				
);



// Home brew board with 4x 7segment display.				
// Bus pins - (top line 1st)
//  x x x 3 x x 0 x x				
//  2 e d a f c g b 1
// letters = 7 segment display (active high)
// numbers = digit select (active low)

// Hex 4xSegment Display
hexdisplay segdisplay(.clk(clk), .value(note3), .enable(1), .segment(_7seg),.omask(digitsel)) ;

// LCD Display
`define _HEXSTR(_value) (_value > 9 ? _value + 8'd55 : _value + 8'd48)

wire _1sec ;
blink #(BOARD_CLOCKSPEED/2) _1secblinker(.clk(clk),.led(_1sec)) ;

wire [255:0] lstring ;
wire [7:0] lnibhexs,unibhexs,lnibhexNote,unibhexNote ;

assign lnibhexNote = `_HEXSTR(note3[3:0]) ;
assign unibhexNote = `_HEXSTR(note3[7:4]) ;


//musicaddress[29:21]
assign unibhexs = `_HEXSTR(musicaddress[28:25]) ;
assign lnibhexs = `_HEXSTR(musicaddress[24:21]) ;
//assign unibhexs = `_HEXSTR(0) ;
//assign lnibhexs = `_HEXSTR(0) ;

assign lstring = " " | " "<<8 
					| "M" << 16 | "I"<<24 | "D"<<32 | "I"<<40 
					| " "<<48 
					| "N"<<56 | "O"<<64 | "T"<<72 | "E"<<80  | ":"<<88 
					| unibhexNote<<96 | lnibhexNote<<104 
					| "h" <<112 | " "<<120 
					// Second LCD Line
					| " " <<128 | " "<<136 
					| "A"<<144 | "D"<<152 | "D"<<160 | "R"<<168 | ":"<<176 
					| unibhexs <<184 | lnibhexs<<192
					| "h"<<200

					| " "<<208 |  " "<<216
					| " "<<224 |  " "<<232
					| (_1sec ? " " : "<") <<240 
					| (!_1sec ? " " : ">") <<248 ;
					//| EOS<<208 ;

// Display a string on one of the lines of our 2x16 LCD display (1602)
// String can be up to 32 characters - (256 bits)
lcd1602String #(EOS) lcdDisplay(.clk(clk),
				.str(lstring),
				 .line(1'b0),
				 .reset(~btn),
				.dat(LCDdata),
				.rs(LCDrs),
				.en(LCDen)
				) ;


	
// Single 7 Seg Display (with 'dot') - 'enable' 2 bits - lower bit main segdisplay, upper bit #dot'

shexseg shexseg(.value(note3 & 15),.enable(2'b11), .dot(led), .osegment(single8seg)) ;

endmodule
